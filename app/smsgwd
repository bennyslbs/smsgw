#!/usr/bin/env python3

import datetime
import os

# SMS GW Server handling multiple SMS GW backends
import threading
import socket
import json
import time
import sys
import argparse
import urllib
import traceback
import configparser

# For gsmmodem
import logging
from gsmmodem.modem import GsmModem, StatusReport, SentSms
from gsmmodem.exceptions import TimeoutException, PinRequiredError, IncorrectPinError

# For Adding received SMS's to DB
import mysql.connector

logging.basicConfig(level=logging.INFO)

import pprint
pp = pprint.PrettyPrinter(indent=4)

queue = []  # Shared between threads socket_2_queue (appending elements) and process_queue (pop by priority
queue_semaphore = threading.BoundedSemaphore(value=1)

# create variable for socket object
serversocket = None
# DB connection
dbcnx = None
dbc = None

def socket_2_queue():
    """Get jobs from socket and fill into queue
    """
    global queue
    while True:
        # establish a connection
        clientsocket, addr = serversocket.accept()
        try:
            data = clientsocket.recv(8192)
        except:
            print('exception during reading from socket')
            continue
        jdata = json.loads(data)
        jdata['clientsocket'] = clientsocket
        with queue_semaphore:
            queue.append(jdata)

def get_element_with_highest_priority(queue):
    """Get next job to execute from queue

    Highest priority is 0
    Evaluating on queue[0..-1]['priority'], starting with first element in queue
    """

    priority = -1
    while True:
        priority += 1
        for i in range(len(queue)):
            if queue[i]['priority'] == priority:
                return queue.pop(i)

def gsmmodem_handle_SMS(sms):
    """Process incomming SMSes (both those there was recived before smsgwd was started and during execution of smsgwd
    """

    insert_query = '''INSERT INTO
smsRx (
  gw,
  number,
  time,
  status,
  text)
VALUES (
  %s,
  %s,
  %s,
  %s,
  %s)
'''
    dbc.execute(
        insert_query,
        (
            'Sim',
            sms.number,
            sms.time,
            sms.status,
            sms.text.encode('utf-16', 'surrogatepass').decode('utf-16'),
        )
    )
    dbcnx.commit()

    logging.info(
        u'''SMS: F: %s at %s; st: %s, msg: %s''',
        sms.number,
        sms.time,
        sms.status,
        sms.text.encode('utf-16', 'surrogatepass').decode('utf-16'),
    )
    if False:
        dbc.execute('select * from sms')
        for _ in dbc:
            logging.info(_)

def gsmmodem_recieve_old_unread(modem):
    """gsmmodem: Read and delete old unread messages (existing SMSes when smsgwd starts)
    """

    for mem in ["ME"]:#["SM","ME","SM_P","ME_P","MT"]:
        messages = modem.listStoredSms(0, mem, True)
        for sms in messages:
            gsmmodem_handle_SMS(sms)
    time.sleep(5) # To prevent reading from port not open

def connect_to_gsmmodem(tty, baud, pin=None):
    """Connect to a gsmmodem
    """

    modem = GsmModem(
        tty, baud,
        incomingCallCallbackFunc=None,
        smsReceivedCallbackFunc=gsmmodem_handle_SMS,
        smsStatusReportCallback=None,
        requestDelivery=True,
        AT_CNMI='',
    )
    logging.getLogger('gsmmodem.modem.GsmModem').setLevel(logging.WARNING)
    logging.getLogger('gsmmodem').setLevel(logging.WARNING)

    # Uncomment the following line to see what the modem is doing:
    logging.basicConfig(format='%(asctime)s %(levelname)s: %(message)s', level=logging.WARNING)

    try:
        modem.connect(
            pin=pin,
            waitingForModemToStartInSeconds=1,  # Sometimes 0 to little, 1 seems ok, but maybe give a bit more.
        )
    except PinRequiredError:
        return [1, 'Error: SIM card PIN required. Please specify a PIN with the -p argument.\n']
    except IncorrectPinError:
        return [1, 'Error: Incorrect SIM card PIN entered.\n']
    try:
        modem.waitForNetworkCoverage(5)
    except TimeoutException:
        modem.close()
        return [1, 'Network signal strength is not sufficient, please adjust modem PSU, position/antenna and try again.']

    gsmmodem_recieve_old_unread(modem) # Process old unread SMS'es
    return modem

def send_via_gsmmodem(gsmmodem, to, msg, GetDeliveryReport):
    """Send A SMS using gsmmodem
    """

    if GetDeliveryReport:
        pass
        #print ('\nSending SMS and waiting for delivery report...')
    try:
        sms = gsmmodem.sendSms(
            to,
            msg, #.decode('utf8').encode('iso-8859-1'),
            waitForDeliveryReport=GetDeliveryReport,
        )
    except TimeoutException:
        #gsmmodem.close()
        time.sleep(10) # To prevent reading from port not open
        return [1, 'Failed to send message: the send operation timed out']
    #gsmmodem.close()
    # Wait up to 10 seconds to check if delivered
    for i in range(10):
        if sms.report.status in [StatusReport.DELIVERED, StatusReport.FAILED]:
            break
        time.sleep(1)
    if GetDeliveryReport and sms.report:
        if sms.report.status == StatusReport.DELIVERED:
            return [sms.report.status, 'gsmmodem: Sent&Delivered']
        else:
            sms_status_str = '?'
            ret_code = -1
            if sms.status == SentSms.ENROUTE:
                ret_code = 1
                sms_status_str = 'ENROUTE (message is still enroute to destination).'
            if sms.status == SentSms.DELIVERED:
                ret_code = 0
                sms_status_str = 'DELIVERED.'
            if sms.status == SentSms.FAILED:
                ret_code = 2
                sms_status_str = 'FAILED.'
            return [sms.report.status, f'gsmmodem: Message sending failed: {sms_status_str}']

def send_sms_for_all_backend_types(gw, gw_params, gsmmodems, p):
    """Send a SMS
    """

    if gw_params['type'] == 'NoSmsGw':
        code = 0
        msg  = u'Info: SMS not sent to %s since type=NoSmsGw is used for SmsGW \'%s\'' % (p['to'], gw)
    elif gw_params['type'] == 'smsit.dk':
        url = 'http://www.smsit.dk/api/sendSms.php'
        if p['to'].startswith('+'):
            to = p['to'][1:] # Just strip off the + sign
        else:
            to = '45' + p['to'], # Assume a danish number (smsit.dk is danish, don't have checked if it works for international numbers
        params = urllib.urlencode({
            'apiKey': gw_params['key'],
            'senderId': p['from'],
            'mobile': '%s' % to,
            'message': p['msg'].encode('utf-8'),
        })
        # Send
        try:
            f = urllib.urlopen(url, params)
        except:
            code = -1
            msg  = u'Error: Can\'t connect to SMS Gateway for \'%s\'' % ('sms-'+sms_grp)
            return {'code':code, 'msg': msg}
        code = int(f.read())
        msg = ''
    elif gw_params['type'] == 'eu.apksoft.android.smsgateway':
        params = urllib.urlencode({
            'password': gw_params['key'],
            'phone': p['to'],
            'text': p['msg'].encode('utf-8'),
        })
        # Send
        try:
            f = urllib.urlopen(gw_params['url'] + '?' + params)
        except:
            code = -1
            msg = u'Error: Can\'t connect to SMS GW Backend for \'%s\'' % (gw)
            return {'code':code, 'msg': msg}
        msg = f.read()

        msg = msg.replace('\n', '')

        match = re.search(
            '.*?<body>(?P<body>.*)</body>.*',
            msg)
        msg = match.group('body')
        msg = msg.replace('<br/>', '\n').rstrip()

        if msg == 'Mesage SENT!': # Status from GW is misspelled.
            code = 0
        elif msg == 'Invalid parameters':
            code = 1
        else:
            code = 28
    elif gw_params['type'] == 'gsmmodem':
        if 'GetDeliveryReport' in p:
            GetDeliveryReport = p['GetDeliveryReport']
        else:
            GetDeliveryReport = gw_params['GetDeliveryReport']

        try:
            [code, msg] = send_via_gsmmodem(gsmmodems[gw], p['to'], p['msg'], GetDeliveryReport)
        except:
            code = 1
            msg  = 'send_via_gsmmodem() failed with error:\n%s' % traceback.format_exc() # sys.exc_info().join(' ')
            msg += 'Retry to connect to modem and resent...\n'
            try:
                gsmmodems[gw] = connect_to_gsmmodem(gw_params['tty'], gw_params['baud'], gw_params['pin'])
                [code, msg2] = send_via_gsmmodem(gsmmodems[gw], p['to'], p['msg'], GetDeliveryReport)
                msg += 'Final status message:\n%s\n' % msg2
            except:
                code = 1
                msg  += 'Tried to reconnect and re- send_via_gsmmodem() failed with error:\n%s' % traceback.format_exc() # sys.exc_info().join(' ')
    else:
        code = -1
        msg  = u'Error: Unimplemented SmsGw Backend type: "'+ gw_params['type']
    return [code, msg]

def exec_queue_job(GWs, gsmmodems, p):
    """Execute a job in the queue (Call send_sms_for_all_backend_types) with the wanted types (any/all/specific backend)
    """

    one_successfull_is_enough = True
    if p['gw'] == 'cheap':
        gws = [GWs['cheap']]
    elif p['gw'] == 'default':
        gws = [GWs['default']]
    elif p['gw'] == 'any':
        gws = GWs['realactive']
        one_successfull_is_enough = True
    elif p['gw'] == 'all':
        gws = GWs['realactive']
        one_successfull_is_enough = False
    else:
        gws = [p['gw']]
    code = 0
    msg = ''
    num_gws_used = 0
    for gw in gws:
        #print 'Dbg: Sending via %s' % gw
        [codeThis, msgThis] = send_sms_for_all_backend_types(gw, GWs['gw'][gw], gsmmodems, p)
        code += abs(codeThis)
        msg += '\n%s: %d; %s' % (gw, codeThis, msgThis)
        num_gws_used += 1
        if p['save_to_db']:
            # Save sent SMS to DB
            insert_query = '''INSERT INTO
smsTx (
  gw,
  priority,
  fnum,
  tnum,
  text,
  GetDeliveryReport,
  send_code,
  send_result,
  time)
VALUES (
  %s,
  %d,
  %s,
  %s,
  %s,
  %d,
  %d,
  %s)
'''
            dbc.execute(
                insert_query,
                (
                    gw,
                    p['priority'],
                    p['from'],
                    p['to'],
                    p['text'],
                    p['GetDeliveryReport'],
                    codeThis,
                    msgThis,
                    datetime.datetime.now().strftime("%Y-%m-%d %H:%M%z"),
                )
            )
            dbcnx.commit()

        if codeThis == 0 and one_successfull_is_enough:
            code = 0
            break

    if num_gws_used > 1:
        return {'code':code, 'msg': msg}
    else:
        return {'code':codeThis, 'msg': msgThis}

def process_queue(GWs):
    """Connect to gsmmodens and Process the queue
    """
    # Create a dict gsmmodems of modem connections to gw's of type gsmmodem
    gsmmodems = {}
    for (gw, gw_params) in GWs['gw'].items():
        if gw_params['type'] == 'gsmmodem':
            gsmmodems[gw] = connect_to_gsmmodem(gw_params['tty'], gw_params['baud'], gw_params['pin'])

    print("Info: Ready to process queue")
    while True:
        time.sleep(1) # Less CPU use + Idle betwen getting semaphone - needed?, not tried without
        with queue_semaphore:
            if len(queue):
                qprocess = get_element_with_highest_priority(queue)
                res = exec_queue_job(GWs, gsmmodems, qprocess)
                qprocess['clientsocket'].send(json.dumps(res).encode())
                qprocess['clientsocket'].close()


def readConfig(config_file):
    """Read config file
    """

    config = configparser.ConfigParser()
    config.read(config_file)

    # Read socketCfg section
    socketCfg = {}
    socketCfg['host']	= config.get('socketCfg', 'host')
    socketCfg['port']	= config.getint('socketCfg', 'port')
    if socketCfg['host'] == 'gethostname()':
        # get local machine name
        socketCfg['host'] = socket.gethostname()

    # Read GWs section
    GWs = {}
    GWs['active']	= json.loads(config.get('GWs', 'active'))  # List of active gateways
    GWs['cheap']	= config.get('GWs', 'cheap')  # Cheap
    GWs['default']	= config.get('GWs', 'default', fallback=0)  # Default

    GWs['realactive'] = GWs['active']
    if 'NoSmsGw' in GWs['realactive']:
            GWs['realactive'].remove('NoSmsGw')

    # Feed parameters for all active GWs to dict gw
    GWs['gw'] = {}
    for g in GWs['active']:
        section = 'smsgw-%s' % (g)
        GWs['gw'][g] = {'type': config.get(section , 'type')}
        params = []
        if GWs['gw'][g]['type'] == 'NoSmsGw':
            pass
        elif GWs['gw'][g]['type'] == 'gsmmodem':
            params = ['tty', 'baud', 'pin', 'GetDeliveryReport']
        elif GWs['gw'][g]['type'] == 'smsit.dk':
            params = ['key', 'default_from']
        elif GWs['gw'][g]['type'] == 'eu.apksoft.android.smsgateway':
            params = ['url', 'key']
        else:
            print("Error: Unkown SmsGW type: '%s', ignoring it." % GWs['gw'][g]['type'])
            GWs['gw'].pop(g)

        for p in params:
            GWs['gw'][g][p] = config.get(section , p)

        # For gsmmodem, convert baud to integer and pin to integer or None
        if GWs['gw'][g]['type'] == 'gsmmodem':
            GWs['gw'][g]['baud'] = int(GWs['gw'][g]['baud'])
            try:
                GWs['gw'][g]['pin'] = int(GWs['gw'][g]['pin'])
            except:
                GWs['gw'][g]['pin'] = None

    return [socketCfg, GWs]

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="""SMS GW Server

        Receives regests to send SMS's from SMS Clients over a socket interface.
        The clients specifies the priority of the SMS (0=highest priority, inf=lowest priority (but use 0..<low number, e.g. 10 or 20> for effectivity)

        This server sends the SMS's in the priotized order, tests have shown that it takes up to around 5 seconds to send a SMS.

        For further details see smsgw - the client
        """)
    default_config_file = '/etc/smsgwd.cfg'
    parser.add_argument('-c', action='store', type=str, default=default_config_file, help='Config file (default: %s)' % default_config_file)
    parser.add_argument('--verbose', '-v', default=0, action='count', help='Verbose, more -v => More verbose')
    argp = parser.parse_args()

    [socketCfg, GWs] = readConfig(argp.c)

    # Default: Basic IPv4 only, if not dualstack_ipv6
    family = socket.AF_INET
    dualstack_ipv6 = False
    if socket.has_dualstack_ipv6():
        # Both IPv4 and IPv6
        family = socket.AF_INET6
        dualstack_ipv6 = True
    serversocket = socket.create_server(
        (socketCfg['host'], socketCfg['port']),
        family=family,
        dualstack_ipv6=dualstack_ipv6,
        backlog=5,  # queue up to <backlog> requests
        reuse_port=True,
    )

    # Prepare database
    dbcnx = mysql.connector.connect(
        user=os.environ['SMSGW_DB_USER'],
        password=os.environ['SMSGW_DB_PASSWORD'],
        host=os.environ['SMSGW_DB_HOST'],
        database=os.environ['SMSGW_DB_DATABASE'],
    )
    dbc = dbcnx.cursor()
    dbc.execute('''CREATE TABLE IF NOT EXISTS
smsRx (
  id INT NOT NULL AUTO_INCREMENT, PRIMARY KEY (id),
  gw VARCHAR(100),
  number VARCHAR(11) CHARACTER SET utf8mb4,
  time TIMESTAMP,
  status VARCHAR(11) CHARACTER SET utf8mb4,
  text VARCHAR(2048) CHARACTER SET utf8mb4)
''')
    dbc.execute('''CREATE TABLE IF NOT EXISTS
smsTx (
  id INT NOT NULL AUTO_INCREMENT, PRIMARY KEY (id),
  gw VARCHAR(100),
  priority INT NOT NULL,
  fnum VARCHAR(11) CHARACTER SET utf8mb4,
  tnum VARCHAR(11) CHARACTER SET utf8mb4,
  text VARCHAR(2048) CHARACTER SET utf8mb4,
  GetDeliveryReport BOOLEAN NOT NULL,
  send_code INT NOT NULL,
  send_result TEXT,
  time TIMESTAMP)
''')


    # Create two threads as follows
    thread_socket_2_queue = threading.Thread(target=socket_2_queue, args=() )
    thread_process_queue = threading.Thread(target=process_queue, args=(GWs, ) )
    thread_socket_2_queue.start()
    thread_process_queue.start()
    logging.info('Ready 🤓')

    while 1:
        time.sleep(10) # Less CPU usage
